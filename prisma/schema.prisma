datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Enquery {
  id          Int      @id @default(autoincrement())
  name        String
  slug        String
  email       String
  message     String
  fatherName  String
  phoneNumber String
  createdAt   DateTime @default(now())
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}

model User {
  id                String   @id @default(cuid())
  name              String
  email             String   @unique
  course            String[] // For both students & teachers
  phoneNumber       String   @unique
  fatherName        String
  motherName        String
  alternativeNumber String
  aadhaarNumber     String   @unique
  dob               DateTime
  address           String
  password          String
  isDeleted         Boolean @default(false)
  role              Role   @default(STUDENT)
  session           Session[]
  accounts          Account[]

  // Teacher-specific fields (will be empty for students)
  details          String?   @default("")
  brief            String?   @default("")
  facebook         String?    @default("")
  instagram        String?    @default("")
  linkdin          String?    @default("")
  youtube          String?    @default("")
  x                String?    @default("")

  updatedAt        DateTime @updatedAt
  createdAt        DateTime @default(now())
}

model Session {
  id           String  @id @default(uuid())
  sessionToken String  @unique
  userId       String
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires      DateTime
  createdAt    DateTime @default(now())
  updateAt     DateTime @updatedAt
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String @id
  token      String @unique
  expires    DateTime
}

model NewsLetter {
  id          Int      @id @default(autoincrement())
  email       String   @unique
  subscribed  Boolean
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())
}