datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Enquery {
  id          Int      @id @default(autoincrement())
  name        String
  slug        String
  email       String
  message     String
  fatherName  String
  phoneNumber String
  createdAt   DateTime @default(now())
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}

model User {
  id                String   @id @default(cuid())
  name              String
  email             String   @unique
  course            String[] // General courses user might be interested in
  phoneNumber       String   @unique
  fatherName        String
  motherName        String
  alternativeNumber String
  aadhaarNumber     String   @unique
  dob               DateTime
  address           String
  password          String
  isDeleted         Boolean @default(false)
  role              Role   @default(STUDENT)
  session           Session[]
  accounts          Account[]

  // Teacher-specific fields
  details          String?   @default("")
  brief            String?   @default("")
  facebook         String?    @default("")
  instagram        String?    @default("")
  linkdin          String?    @default("")
  youtube          String?    @default("")
  x                String?    @default("")

  // Relations
  coursesCreated   Course[]   @relation("TeacherCourses") // Courses created by a teacher
  enrollments      Enrollment[] // Courses a student is enrolled in

  updatedAt        DateTime @updatedAt
  createdAt        DateTime @default(now())
}

model Course {
  id             String      @id @default(cuid())
  title          String
  slug           String      @unique
  image          String
  bannerImage    String
  intro          String
  description    String
  thumbnail      String
  introVideo     String   // URL for introduction video
  price          Float
  certification  String
  
  // Relations
  teacherId      String
  teacher        User      @relation("TeacherCourses", fields: [teacherId], references: [id], onDelete: Cascade)
  chapters       Chapter[]  // One-to-Many relation with chapters
  courseVideos   CourseVideo[] // Course videos
  enrollments    Enrollment[] // Students enrolled in this course
  
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Chapter {
  id          String    @id @default(cuid())
  title       String
  slug        String    @unique
  description String
  courseId    String
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  videos      CourseVideo[]
  
  updatedAt        DateTime @updatedAt
  createdAt        DateTime @default(now())
}

model CourseVideo {
  id          String    @id @default(cuid())
  title       String
  slug        String    @unique
  videoUrl    String   // Video link
  duration    Int      // Duration in minutes
  chapterId   String?
  chapter     Chapter?  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  courseId    String
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  updatedAt        DateTime @updatedAt
  createdAt        DateTime @default(now())
}

model Enrollment {
  id         String  @id @default(cuid())
  studentId  String
  courseId   String
  student    User    @relation(fields: [studentId], references: [id], onDelete: Cascade)
  course     Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  enrolledAt DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Session {
  id           String  @id @default(uuid())
  sessionToken String  @unique
  userId       String
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String @id
  token      String @unique
  expires    DateTime
}

model NewsLetter {
  id          Int      @id @default(autoincrement())
  email       String   @unique
  subscribed  Boolean
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())
}